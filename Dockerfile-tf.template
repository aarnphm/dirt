{% extends bento_base_template %}
{# change the value of tf_image to #}
{# tensorflow/tensorflow:nightly-gpu #}
{# if your op supports GPU kernel #}
{% set tf_image = "tensorflow/tensorflow:nightly" %}
{% block SETUP_BENTO_BASE_IMAGE %}

FROM --platform=linux/amd64 {{ tf_image }} as build-stage

WORKDIR /tmp

COPY ./src/tfops/zero_out.cc .

SHELL [ "bash", "-exo", "pipefail", "-c" ]

RUN python3 -c "import tensorflow as tf"

RUN bash <<EOF
set -ex

TF_CFLAGS=( $(python3 -c 'import tensorflow as tf; print(" ".join(tf.sysconfig.get_compile_flags()))') )
TF_LFLAGS=( $(python3 -c 'import tensorflow as tf; print(" ".join(tf.sysconfig.get_link_flags()))') )

g++ --std=c++14 -shared /tmp/zero_out.cc -o zero_out.so -fPIC "${TF_CFLAGS[@]}" "${TF_LFLAGS[@]}" -O2
EOF

# dry run compiled lib
COPY <<-"eot" /tmp/dry_run
#!/usr/bin/env python3

def main():
    import tensorflow as tf
    import numpy as np

    zero_out = tf.load_op_library('/tmp/zero_out.so').zero_out
    if not np.isclose(zero_out([[1, 2], [3, 4]]).numpy(), np.array([[1,0], [0,0]], dtype=np.int32)).all(): return 1
    return 0

if __name__ == "__main__":
    raise SystemExit(main())
eot

RUN chmod +x /tmp/dry_run \
    && /tmp/dry_run

{{ super() }}

COPY --from=build-stage /tmp/zero_out.so /usr/lib/zero_out.so

{% endblock %}
{% block SETUP_BENTO_COMPONENTS %}
{{ super() }}
RUN stat /usr/lib/zero_out.so
{% endblock %}
